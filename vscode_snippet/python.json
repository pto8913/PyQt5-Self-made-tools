{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"pyqt" : {
		"prefix" : "pyqt",
		"body" : [
			"from PyQt5.QtWidgets import (",
			"  QApplication, QListWidget, QMessageBox, QPushButton, QWidget, QMainWindow, ",
			"  QGridLayout, QVBoxLayout, QLineEdit, QFileDialog, QProgressDialog,",
			")",
			"from PyQt5.QtCore import Qt, QObject, QThread, pyqtSignal", 
			"from PyQt5.QtGui import QFont"
		],
		"description": "pyqt"
	},

	"qt_init" : {
		"prefix": "qt_init",
		"body": [
			"class Main(QWidget):",
			"  def __init__(self):",
			"    super(Main, self).__init__()",
			"    ",
			"    self.__initUI()",
			"    ",
			"  def __initUI(self):",
		]
	},

	"qt_main" : {
		"prefix": "qt_main",
		"body": [
			"def main():",
			"  app = QApplication(sys.argv)",
			"  font = QFont(\"Meiryo\")",
			"  app.setFont(font)",
			"  w = Main()",
			"  w.setWindowTitle(\"title\")",
			"  w.show()",
			"  w.raise_()",
			"  app.exec_()",
			"",
			"if __name__ == '__main__':",
			"  main()"
		],
		"description": "qt_main",
	},

	"qt_dnd" : {
		"prefix": "qt_dnd",
		"body": [
			"def dragEnterEvent(self, event):",
			"  if event.mimeData().hasUrls():",
			"    event.accept()",
			"  else:",
			"    event.ignore()",
			"",
		  "def dropEvent(self, event):",
			"  urls = event.mimeData().urls()",
			"",
			"  for url in urls:",
			"    path = url.toLocalFile()",
			"    tmp = path.split(\".\")",
			"    if len(tmp) != 1:",
			"      self.__FileList.addItem(os.path.basename(path))",
			"    else:",
			"      for roots, dirs, files in os.walk(tmp[0]):",
			"        for f in files:",
			"          self.__FileList.addItem(os.path.basename(f))",
			"",
			"        if len(dirs) != 0:",
			"          self.__que = deque()",
			"          for d in dirs:",
			"            self.__que.append(d)",
			"          self.__addDir()",
			"",
			"def __addDir(self):",
			"  for roots, dirs, files in os.walk(self.__que.popleft()):",
			"    for f in files:",
			"      self.__FileList.addItem(os.path.basename(f))",
			"",
			"    if len(dirs) != 0:",
			"      for d in dirs:",
			"        self.__que.append(d)",
			"      return self.__addDir()",
			"",
			"  if len(self.__que) != 0:",
			"    return self.__addDir()",
		],
		"description": "qt_dnd",
	},

	"qt_thread" : {
		"prefix": "qt_thread",
		"body": [
			"def debugOutput(out):",
			"  sys.stdout.write(out + '\\n')",
			"  sys.stdout.flush()",
			"",
			"class Notifier(QObject):",
			"  notify = pyqtSignal()",
			"",
			"class Thread(QThread):",
			"  def __init__(self, notifier, name):",
			"    super().__init__()",
			"    ",
			"    self.notifier = notifier",
			"    self.name = name",
			"  ",
			"  def run(self):",
			"    debugOutput('start thread :' + self.name)",
			"    self.notifier.notify.emit()",
		]
	},

	"qt_sub_thread" : {
		"prefix": "qt_sub_thread",
		"body": [
			"def __onClicked(self):",
			"  self.notifier = Notifier()",
			"  self.thread = Thread(self.notifier, 'name')",
			"  self.notifier.moveToThread(self.thread)",
			"  self.notifier.notify.connect('something', type = Qt.DirectConnection)",
			"  self.thread.start()",
		],
		"description": "qt_sub_thread",
	},

	"osn" : {
		"prefix": "osnm",
		"body": [
			"import os",
			"import sys",
			"import numpy as np",
			"import matplotlib.pyplot as plt",
			"",
		],
		"description": "osnm",
	},

	"get_dir" : {
		"prefix": "get_dir",
		"body": [
			"def __checkDir(self, dirname):",
			"  if not os.path.exists(dirname):",
			"    os.mkdir(dirname)",
			"",
		  "def __getDir(self):",
			"  self.__this_file_dir = os.path.dirname(os.path.abspath(sys.argv[0]))",
			"  os.chdir(self.__this_file_dir + '/../../')",
			"  self.__root_dir = os.getcwd()",
			"",
			"  self.__db_dir = self.__root_dir + '/DB/'",
			"  self.__checkDir(self.__db_dir)",
			"  self.__xml_dir = self.__root_dir + '/Terrain_xml_data/'",
			"  self.__checkDir(self.__xml_dir)",
			"  self.__save_fig_dir = self.__root_dir + '/Image/'",
			"  self.__checkDir(self.__save_fig_dir)",
		],
		"description": "get_dir",
	},

	"extension" : {
		"prefix": "extension",
		"body": [
			"def __inExtension(self, item):",
			"  if item.split('.')[1] == 'db':",
			"     return True",
			"  return False",
		],
		"description": "extension",
	},

	"qt_button" :{
		"prefix": "qt_button",
		"body" : [
			"Button = QPushButton('button')",
			"Button.clicked.connect(self.__clicked)"
		],
		"description": "qt_button"
	},
}
